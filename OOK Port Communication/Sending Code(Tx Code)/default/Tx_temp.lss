
Tx_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000024  00800100  00800100  00000324  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d3  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000545  00000000  00000000  00000417  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ec  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000046b  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e8  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000f0  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000138  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 3d 01 	call	0x27a	; 0x27a <main>
  c6:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <serial_init>:
//-----------------------------------serial----------------------------------------
void serial_init(void) 
{
  unsigned int baudrate[15] ={416,207,103,68,51,34,25,16,12,8,3,3,1,0}; 

  UBRR1L = baudrate[0];
  ce:	80 ea       	ldi	r24, 0xA0	; 160
  d0:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = baudrate[0]>>8;      
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 98 00 	sts	0x0098, r24
  
  UBRR0L = baudrate[12];
  da:	89 b9       	out	0x09, r24	; 9
  UBRR0H = baudrate[12]>>8;         
  dc:	10 92 90 00 	sts	0x0090, r1
   
  UCSR1C = (1 << UCSZ1) | (1 << UCSZ0);  // no parity ,  stop bit 1 , data 8
  e0:	96 e0       	ldi	r25, 0x06	; 6
  e2:	90 93 9d 00 	sts	0x009D, r25
  UCSR1B = (1 << TXEN) | (1 << RXEN);
  e6:	88 e1       	ldi	r24, 0x18	; 24
  e8:	80 93 9a 00 	sts	0x009A, r24
  //double baudrate 
   
  UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);  //serial 8-bit format. no parity, stop bit 1, data 8
  ec:	90 93 95 00 	sts	0x0095, r25
  UCSR0B = (1 << TXEN0) | (1 << RXEN0);    //enable tx rx located in control reg UCSR1B
  f0:	8a b9       	out	0x0a, r24	; 10
                                         //When set, these two bits turn on the serial buffers to allow for serial communications
//	UCSR0A |= (1 << U2X0); //double baudrate
//	 UCSR1A |= (1 << U2X1); //double baudrate
}
  f2:	08 95       	ret

000000f4 <Timer1_init>:
{

	//unsigned int cycles;
	unsigned long cycles;
  	// Initializing Timer
	TCCR1A = 0;                 // clear control register A 
  f4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << WGM13); // set mode 8: phase and frequency correct pwm, stop the timer
  f6:	8e b5       	in	r24, 0x2e	; 46
  f8:	80 61       	ori	r24, 0x10	; 16
  fa:	8e bd       	out	0x2e, r24	; 46
 	
	unsigned char oldSREG = SREG;
  fc:	2f b7       	in	r18, 0x3f	; 63
	cli();
  fe:	f8 94       	cli
   	//cycles = 10; // 2/(16000000)*10 = 1.25 us,no prescale
//	 cycles = 2; // 2/(16000000/8)*10 = 10us, prescale: clk / 8
	//cycles = 10; // 2/(16000000/8)*10 = 10us, *20 = 20us (50KHz)
	cycles = 200;	// 2/(16000000/64)*125 = 1ms , *25 = 0.2ms
	ICR1 = cycles;
 100:	88 ec       	ldi	r24, 0xC8	; 200
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	97 bd       	out	0x27, r25	; 39
 106:	86 bd       	out	0x26, r24	; 38
	//sei();
	SREG = oldSREG;
 108:	2f bf       	out	0x3f, r18	; 63

	
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
 10a:	8e b5       	in	r24, 0x2e	; 46
 10c:	88 7f       	andi	r24, 0xF8	; 248
 10e:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (1 << CS10);	// no prescale, clk / 1
	TCCR1B |= (1 << CS11);	// prescale: clk / 8
 110:	8e b5       	in	r24, 0x2e	; 46
 112:	82 60       	ori	r24, 0x02	; 2
 114:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64

	

}
 116:	08 95       	ret

00000118 <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
	cnt++;
 12a:	80 91 00 01 	lds	r24, 0x0100
 12e:	90 91 01 01 	lds	r25, 0x0101
 132:	a0 91 02 01 	lds	r26, 0x0102
 136:	b0 91 03 01 	lds	r27, 0x0103
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	a1 1d       	adc	r26, r1
 13e:	b1 1d       	adc	r27, r1
 140:	80 93 00 01 	sts	0x0100, r24
 144:	90 93 01 01 	sts	0x0101, r25
 148:	a0 93 02 01 	sts	0x0102, r26
 14c:	b0 93 03 01 	sts	0x0103, r27
}
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <transmit1>:



void transmit1(unsigned char data)
{
 162:	98 2f       	mov	r25, r24
while(!(UCSR1A & (1<<UDRE1)));
 164:	80 91 9b 00 	lds	r24, 0x009B
 168:	85 ff       	sbrs	r24, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <transmit1+0x2>
UDR1=data;
 16c:	90 93 9c 00 	sts	0x009C, r25

}
 170:	08 95       	ret

00000172 <transmit0>:

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 172:	5d 9b       	sbis	0x0b, 5	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <transmit0>
UDR0=data;
 176:	8c b9       	out	0x0c, r24	; 12

}
 178:	08 95       	ret

0000017a <Rxdata>:

unsigned int Rxdata (void)
{

	// Wait for empty transmit buffer 
	while ( !(UCSR0A & (1<<RXC0)) );
 17a:	5f 9b       	sbis	0x0b, 7	; 11
 17c:	fe cf       	rjmp	.-4      	; 0x17a <Rxdata>

	// Receive data from buffer, return the data 
	return UDR0;	
 17e:	8c b1       	in	r24, 0x0c	; 12

}
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	08 95       	ret

00000184 <send_code_portC>:


//Sending Data through port C

unsigned int send_code_portC(char data)
{
 184:	58 2f       	mov	r21, r24
 186:	40 e8       	ldi	r20, 0x80	; 128
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTC= 0x00;
		}
		else
		{	
			PORTC = 0xFF;
 18c:	af ef       	ldi	r26, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18e:	60 e9       	ldi	r22, 0x90	; 144
 190:	71 e0       	ldi	r23, 0x01	; 1
	unsigned char bit_to_check=0x80;
	unsigned int flag=0;
	while(flag<8)
	{
			
		if (!(CHECKBIT(data, bit_to_check)))
 192:	84 2f       	mov	r24, r20
 194:	85 23       	and	r24, r21
 196:	11 f4       	brne	.+4      	; 0x19c <send_code_portC+0x18>
		{
			PORTC= 0x00;
 198:	15 ba       	out	0x15, r1	; 21
 19a:	01 c0       	rjmp	.+2      	; 0x19e <send_code_portC+0x1a>
		}
		else
		{	
			PORTC = 0xFF;
 19c:	a5 bb       	out	0x15, r26	; 21
		}
		flag++;
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	9e e4       	ldi	r25, 0x4E	; 78
 1a6:	fb 01       	movw	r30, r22
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <send_code_portC+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <send_code_portC+0x22>

unsigned int send_code_portC(char data)
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0;
	while(flag<8)
 1b0:	28 30       	cpi	r18, 0x08	; 8
 1b2:	31 05       	cpc	r19, r1
 1b4:	11 f0       	breq	.+4      	; 0x1ba <send_code_portC+0x36>
		else
		{	
			PORTC = 0xFF;
		}
		flag++;
		bit_to_check = bit_to_check >> 1;
 1b6:	46 95       	lsr	r20
 1b8:	ec cf       	rjmp	.-40     	; 0x192 <send_code_portC+0xe>
		//_delay_us(2000);
		_delay_ms(2000);              // 50ms delay
	}
	return 1;
}
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	08 95       	ret

000001c0 <send_code_portD>:

// Sending Data through port D pin 1

unsigned int send_code_portD(char data)
{
 1c0:	58 2f       	mov	r21, r24
 1c2:	40 e8       	ldi	r20, 0x80	; 128
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTD= 0x00;
		}
		else
		{	
			PORTD = 0xFF;
 1c8:	af ef       	ldi	r26, 0xFF	; 255
 1ca:	60 e9       	ldi	r22, 0x90	; 144
 1cc:	71 e0       	ldi	r23, 0x01	; 1
	unsigned char bit_to_check=0x80;
	unsigned int flag=0;//,cnt1=0;
	while(flag<8)
	{
			
		if (!(CHECKBIT(data, bit_to_check)))
 1ce:	84 2f       	mov	r24, r20
 1d0:	85 23       	and	r24, r21
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <send_code_portD+0x18>
		{
			PORTD= 0x00;
 1d4:	12 ba       	out	0x12, r1	; 18
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <send_code_portD+0x1a>
		}
		else
		{	
			PORTD = 0xFF;
 1d8:	a2 bb       	out	0x12, r26	; 18
		}
		flag++;
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	80 e1       	ldi	r24, 0x10	; 16
 1e0:	97 e2       	ldi	r25, 0x27	; 39
 1e2:	fb 01       	movw	r30, r22
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <send_code_portD+0x24>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ea:	d9 f7       	brne	.-10     	; 0x1e2 <send_code_portD+0x22>

unsigned int send_code_portD(char data)
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0;//,cnt1=0;
	while(flag<8)
 1ec:	28 30       	cpi	r18, 0x08	; 8
 1ee:	31 05       	cpc	r19, r1
 1f0:	11 f0       	breq	.+4      	; 0x1f6 <send_code_portD+0x36>
		else
		{	
			PORTD = 0xFF;
		}
		flag++;
		bit_to_check = bit_to_check >> 1;
 1f2:	46 95       	lsr	r20
 1f4:	ec cf       	rjmp	.-40     	; 0x1ce <send_code_portD+0xe>
		}*/
		_delay_us(1000000);
		//_delay_ms(4000);              // 50ms delay
	}
	return 1;
}
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	08 95       	ret

000001fc <send_code_portDp2>:

// Sending Data through port D pin 2

unsigned int send_code_portDp2(char data)
{
 1fc:	58 2f       	mov	r21, r24
 1fe:	40 e8       	ldi	r20, 0x80	; 128
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTD= 0x00;
		}
		else
		{	
			PORTD = 0x02;
 204:	e2 e0       	ldi	r30, 0x02	; 2
 206:	68 ec       	ldi	r22, 0xC8	; 200
 208:	70 e0       	ldi	r23, 0x00	; 0
	unsigned char bit_to_check=0x80;
	unsigned int flag=0;
	while(flag<8)
	{
			
		if (!(CHECKBIT(data, bit_to_check)))
 20a:	84 2f       	mov	r24, r20
 20c:	85 23       	and	r24, r21
 20e:	11 f4       	brne	.+4      	; 0x214 <send_code_portDp2+0x18>
		{
			PORTD= 0x00;
 210:	12 ba       	out	0x12, r1	; 18
 212:	01 c0       	rjmp	.+2      	; 0x216 <send_code_portDp2+0x1a>
		}
		else
		{	
			PORTD = 0x02;
 214:	e2 bb       	out	0x12, r30	; 18
		}
		flag++;
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	cb 01       	movw	r24, r22
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <send_code_portDp2+0x20>

unsigned int send_code_portDp2(char data)
{
	unsigned char bit_to_check=0x80;
	unsigned int flag=0;
	while(flag<8)
 220:	28 30       	cpi	r18, 0x08	; 8
 222:	31 05       	cpc	r19, r1
 224:	11 f0       	breq	.+4      	; 0x22a <send_code_portDp2+0x2e>
		else
		{	
			PORTD = 0x02;
		}
		flag++;
		bit_to_check = bit_to_check >> 1;
 226:	46 95       	lsr	r20
 228:	f0 cf       	rjmp	.-32     	; 0x20a <send_code_portDp2+0xe>
		_delay_us(50);
	}
	return 1;
}
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	08 95       	ret

00000230 <getSensorData>:

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 230:	5d 9b       	sbis	0x0b, 5	; 11
 232:	fe cf       	rjmp	.-4      	; 0x230 <getSensorData>
UDR0=data;
 234:	82 e4       	ldi	r24, 0x42	; 66
 236:	8c b9       	out	0x0c, r24	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 238:	5d 9b       	sbis	0x0b, 5	; 11
 23a:	fe cf       	rjmp	.-4      	; 0x238 <getSensorData+0x8>
UDR0=data;
 23c:	8d e4       	ldi	r24, 0x4D	; 77
 23e:	8c b9       	out	0x0c, r24	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 240:	5d 9b       	sbis	0x0b, 5	; 11
 242:	fe cf       	rjmp	.-4      	; 0x240 <getSensorData+0x10>
UDR0=data;
 244:	82 ee       	ldi	r24, 0xE2	; 226
 246:	8c b9       	out	0x0c, r24	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 248:	5d 9b       	sbis	0x0b, 5	; 11
 24a:	fe cf       	rjmp	.-4      	; 0x248 <getSensorData+0x18>
UDR0=data;
 24c:	1c b8       	out	0x0c, r1	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 24e:	5d 9b       	sbis	0x0b, 5	; 11
 250:	fe cf       	rjmp	.-4      	; 0x24e <getSensorData+0x1e>
UDR0=data;
 252:	1c b8       	out	0x0c, r1	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 254:	5d 9b       	sbis	0x0b, 5	; 11
 256:	fe cf       	rjmp	.-4      	; 0x254 <getSensorData+0x24>
UDR0=data;
 258:	1c b8       	out	0x0c, r1	; 12

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 25a:	5d 9b       	sbis	0x0b, 5	; 11
 25c:	fe cf       	rjmp	.-4      	; 0x25a <getSensorData+0x2a>
UDR0=data;
 25e:	1c b8       	out	0x0c, r1	; 12
 260:	e4 e0       	ldi	r30, 0x04	; 4
 262:	f1 e0       	ldi	r31, 0x01	; 1

unsigned int Rxdata (void)
{

	// Wait for empty transmit buffer 
	while ( !(UCSR0A & (1<<RXC0)) );
 264:	5f 9b       	sbis	0x0b, 7	; 11
 266:	fe cf       	rjmp	.-4      	; 0x264 <getSensorData+0x34>

	// Receive data from buffer, return the data 
	return UDR0;	
 268:	8c b1       	in	r24, 0x0c	; 12

	for(ctr=0; ctr <32; ctr++)
		{
					

			data[ctr] = Rxdata();
 26a:	81 93       	st	Z+, r24
	transmit0(0x00);
	transmit0(0x00);
	transmit0(0x00);
	transmit0(0x00);

	for(ctr=0; ctr <32; ctr++)
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	e4 32       	cpi	r30, 0x24	; 36
 270:	f8 07       	cpc	r31, r24
 272:	c1 f7       	brne	.-16     	; 0x264 <getSensorData+0x34>
		}

	//return data;
	return 0;

}
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	08 95       	ret

0000027a <main>:

//Main Function----------------------------------------------------------------------------

int main(void)
{   
	serial_init();
 27a:	0e 94 67 00 	call	0xce	; 0xce <serial_init>
	Timer1_init();
 27e:	0e 94 7a 00 	call	0xf4	; 0xf4 <Timer1_init>
	DDRD=0xFF;
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	81 bb       	out	0x11, r24	; 17
	TIMSK |= 0x04;
 286:	97 b7       	in	r25, 0x37	; 55
 288:	94 60       	ori	r25, 0x04	; 4
 28a:	97 bf       	out	0x37, r25	; 55
	SREG |= 0x80;
 28c:	9f b7       	in	r25, 0x3f	; 63
 28e:	90 68       	ori	r25, 0x80	; 128
 290:	9f bf       	out	0x3f, r25	; 63
	DDRA=0xFF;		//sets portA pins as output 
 292:	8a bb       	out	0x1a, r24	; 26
	DDRC=0xFF;
 294:	84 bb       	out	0x14, r24	; 20
}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
UDR0=data;
 296:	9a ea       	ldi	r25, 0xAA	; 170

}

void transmit0(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 298:	5d 9b       	sbis	0x0b, 5	; 11
 29a:	fe cf       	rjmp	.-4      	; 0x298 <main+0x1e>
UDR0=data;
 29c:	9c b9       	out	0x0c, r25	; 12



void transmit1(unsigned char data)
{
while(!(UCSR1A & (1<<UDRE1)));
 29e:	80 91 9b 00 	lds	r24, 0x009B
 2a2:	85 ff       	sbrs	r24, 5
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <main+0x24>
UDR1=data;
 2a6:	90 93 9c 00 	sts	0x009C, r25
 2aa:	f6 cf       	rjmp	.-20     	; 0x298 <main+0x1e>

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
