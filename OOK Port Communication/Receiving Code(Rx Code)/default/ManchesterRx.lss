
ManchesterRx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000002ae  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008d  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000027d  00000000  00000000  0000035b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000156  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000248  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000175  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c0  00000000  00000000  00000b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_14>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 08 01 	call	0x210	; 0x210 <main>
  c6:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <serial_init>:
//-----------------------------------serial----------------------------------------
void serial_init(void) 
{
  unsigned int baudrate[15] ={416,207,103,68,51,34,25,16,12,8,3,3,1,0}; 

  UBRR1L = baudrate[4];
  ce:	83 e3       	ldi	r24, 0x33	; 51
  d0:	80 93 99 00 	sts	0x0099, r24
  UBRR1H = baudrate[4]>>8;      
  d4:	10 92 98 00 	sts	0x0098, r1
  
  UBRR0L = baudrate[4];
  d8:	89 b9       	out	0x09, r24	; 9
  UBRR0H = baudrate[4]>>8;         
  da:	10 92 90 00 	sts	0x0090, r1
   
  UCSR1C = (1 << UCSZ1) | (1 << UCSZ0);  // no parity ,  stop bit 1 , data 8
  de:	96 e0       	ldi	r25, 0x06	; 6
  e0:	90 93 9d 00 	sts	0x009D, r25
  UCSR1B = (1 << TXEN) | (1 << RXEN);
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	80 93 9a 00 	sts	0x009A, r24
  //double baudrate 
  UCSR0C = (1 << UCSZ1) | (1 << UCSZ0);  //serial 8-bit format. no parity, stop bit 1, data 8
  ea:	90 93 95 00 	sts	0x0095, r25
  UCSR0B = (1 << TXEN) | (1 << RXEN);    //enable tx rx located in control reg UCSR1B
  ee:	8a b9       	out	0x0a, r24	; 10
  //UCSR0A |= (1 << U2X0); //double baudrate
//	 UCSR1A |= (1 << U2X1); //double baudrate                                        //When set, these two bits turn on the serial buffers to allow for serial communications
}
  f0:	08 95       	ret

000000f2 <transmit>:

void transmit(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
  f2:	5d 9b       	sbis	0x0b, 5	; 11
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <transmit>
UDR0=data;
  f6:	8c b9       	out	0x0c, r24	; 12

}
  f8:	08 95       	ret

000000fa <Rxdata>:

unsigned char Rxdata (void)
{

	// Wait for empty transmit buffer 
	while ( !(UCSR1A & (1<<RXC1)) );
  fa:	80 91 9b 00 	lds	r24, 0x009B
  fe:	87 ff       	sbrs	r24, 7
 100:	fc cf       	rjmp	.-8      	; 0xfa <Rxdata>

	// Receive data from buffer, return the data 
	return UDR1;	
 102:	80 91 9c 00 	lds	r24, 0x009C

}
 106:	08 95       	ret

00000108 <Timer1_init>:
{

	//unsigned int cycles;
	unsigned long cycles;
  	// Initializing Timer
	TCCR1A = 0;                 // clear control register A 
 108:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1 << WGM13); // set mode 8: phase and frequency correct pwm, stop the timer
 10a:	8e b5       	in	r24, 0x2e	; 46
 10c:	80 61       	ori	r24, 0x10	; 16
 10e:	8e bd       	out	0x2e, r24	; 46
 	
	unsigned char oldSREG = SREG;
 110:	2f b7       	in	r18, 0x3f	; 63
	cli();
 112:	f8 94       	cli
	cycles = 200;
	//cycles = 10; // 2/(16000000)*10 = 1.25 us,no prescale
    //cycles = 1; // 2/(16000000/8)*1 = 1us, prescale: clk / 8
	//cycles = 20; // 2/(16000000/8)*10 = 10us, *20 = 20us (50KHz)
	//cycles = 125;	// 2/(16000000/64)*125 = 1ms , *25 = 0.2ms ,prescale: clk / 64
	ICR1 = cycles;
 114:	88 ec       	ldi	r24, 0xC8	; 200
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	97 bd       	out	0x27, r25	; 39
 11a:	86 bd       	out	0x26, r24	; 38
	//sei();
	SREG = oldSREG;
 11c:	2f bf       	out	0x3f, r18	; 63

	
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
 11e:	8e b5       	in	r24, 0x2e	; 46
 120:	88 7f       	andi	r24, 0xF8	; 248
 122:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS10);	// no prescale
 124:	8e b5       	in	r24, 0x2e	; 46
 126:	81 60       	ori	r24, 0x01	; 1
 128:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64
	//TCCR1B |= (1 << CS11) | (1 << CS10);	// prescale: clk / 64

	

}
 12a:	08 95       	ret

0000012c <__vector_14>:

ISR(TIMER1_OVF_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
	cnt++;
 13e:	80 91 00 01 	lds	r24, 0x0100
 142:	90 91 01 01 	lds	r25, 0x0101
 146:	a0 91 02 01 	lds	r26, 0x0102
 14a:	b0 91 03 01 	lds	r27, 0x0103
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	a1 1d       	adc	r26, r1
 152:	b1 1d       	adc	r27, r1
 154:	80 93 00 01 	sts	0x0100, r24
 158:	90 93 01 01 	sts	0x0101, r25
 15c:	a0 93 02 01 	sts	0x0102, r26
 160:	b0 93 03 01 	sts	0x0103, r27
}
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <syncHeaderPortC>:
	byte_placeholder	= 0x00;
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;

	temp = PINA;
	while(!(CHECKBIT(temp, bit_to_check))){temp = PINA; }//transmit(0x88);}
 176:	89 b3       	in	r24, 0x19	; 25
 178:	80 ff       	sbrs	r24, 0
 17a:	fd cf       	rjmp	.-6      	; 0x176 <syncHeaderPortC>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0


	while(1){
//		_delay_us(50);
	cnt1 = 0, cnt=0;
 180:	10 92 00 01 	sts	0x0100, r1
 184:	10 92 01 01 	sts	0x0101, r1
 188:	10 92 02 01 	sts	0x0102, r1
 18c:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 190:	80 91 00 01 	lds	r24, 0x0100
 194:	90 91 01 01 	lds	r25, 0x0101
 198:	a0 91 02 01 	lds	r26, 0x0102
 19c:	b0 91 03 01 	lds	r27, 0x0103


	while(1){
//		_delay_us(50);
	cnt1 = 0, cnt=0;
		while(cnt1==0)
 1a0:	89 2b       	or	r24, r25
 1a2:	b1 f3       	breq	.-20     	; 0x190 <syncHeaderPortC+0x1a>
 1a4:	c9 01       	movw	r24, r18
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
		{
			cnt1 = cnt;
		}
	
		temp = PINA;	
		if(CHECKBIT(temp, bit_to_check)){
 1aa:	c8 9b       	sbis	0x19, 0	; 25
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <syncHeaderPortC+0x3e>
			
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;			
 1ae:	9c 01       	movw	r18, r24
 1b0:	21 60       	ori	r18, 0x01	; 1
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <syncHeaderPortC+0x40>
			}	
		else
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 1b4:	9c 01       	movw	r18, r24
				byte_placeholder = byte_placeholder|bit_to_shift;	
			}
		
		if(byte_placeholder == 0xFF80)
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	20 38       	cpi	r18, 0x80	; 128
 1ba:	38 07       	cpc	r19, r24
 1bc:	09 f7       	brne	.-62     	; 0x180 <syncHeaderPortC+0xa>
		break;
	}

//	transmit(byte_placeholder);
	return 1;
}
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 95       	ret

000001c4 <shiftByte>:

// --------------------------- Data Detection ----------------------------------

unsigned int shiftByte(){
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
	

	while(flag<8){
//		_delay_us(50);

	cnt1 = 0, cnt=0;
 1cc:	10 92 00 01 	sts	0x0100, r1
 1d0:	10 92 01 01 	sts	0x0101, r1
 1d4:	10 92 02 01 	sts	0x0102, r1
 1d8:	10 92 03 01 	sts	0x0103, r1
		while(cnt1==0)
		{
			cnt1 = cnt;
 1dc:	80 91 00 01 	lds	r24, 0x0100
 1e0:	90 91 01 01 	lds	r25, 0x0101
 1e4:	a0 91 02 01 	lds	r26, 0x0102
 1e8:	b0 91 03 01 	lds	r27, 0x0103

	while(flag<8){
//		_delay_us(50);

	cnt1 = 0, cnt=0;
		while(cnt1==0)
 1ec:	89 2b       	or	r24, r25
 1ee:	b1 f3       	breq	.-20     	; 0x1dc <shiftByte+0x18>
 1f0:	c9 01       	movw	r24, r18
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
			cnt1 = cnt;
		}
	
		temp = PINA;
		
		if(CHECKBIT(temp, bit_to_check)){
 1f6:	c8 9b       	sbis	0x19, 0	; 25
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <shiftByte+0x3c>
			
				bit_to_shift = 0x01;				
				byte_placeholder = byte_placeholder<<1;
				byte_placeholder = byte_placeholder|bit_to_shift;
 1fa:	9c 01       	movw	r18, r24
 1fc:	21 60       	ori	r18, 0x01	; 1
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <shiftByte+0x3e>
			
			}					
		else
			{
				bit_to_shift = 0x00;				
				byte_placeholder = byte_placeholder<<1;
 200:	9c 01       	movw	r18, r24
				byte_placeholder = byte_placeholder|bit_to_shift;
			
			}


	flag++;
 202:	4f 5f       	subi	r20, 0xFF	; 255
 204:	5f 4f       	sbci	r21, 0xFF	; 255
	byte_placeholder	= 0x00;
	byte_placeholder1	= 0xFF80;
	predata				= 0x00;
	

	while(flag<8){
 206:	48 30       	cpi	r20, 0x08	; 8
 208:	51 05       	cpc	r21, r1
 20a:	01 f7       	brne	.-64     	; 0x1cc <shiftByte+0x8>


	flag++;
}
return byte_placeholder;
}
 20c:	c9 01       	movw	r24, r18
 20e:	08 95       	ret

00000210 <main>:


//Main Program----------------------------------------------------------------------------
int main(void){

	serial_init(); 
 210:	0e 94 67 00 	call	0xce	; 0xce <serial_init>
	Timer1_init(); 
 214:	0e 94 84 00 	call	0x108	; 0x108 <Timer1_init>
	DDRA=0x00;
 218:	1a ba       	out	0x1a, r1	; 26
	PORTA=0xFF;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	8b bb       	out	0x1b, r24	; 27
	TIMSK |= 0x04;
 21e:	87 b7       	in	r24, 0x37	; 55
 220:	84 60       	ori	r24, 0x04	; 4
 222:	87 bf       	out	0x37, r24	; 55
	SREG |= 0x80;
 224:	8f b7       	in	r24, 0x3f	; 63
 226:	80 68       	ori	r24, 0x80	; 128
 228:	8f bf       	out	0x3f, r24	; 63
	//syncHeaderPortC();
	//transmit(0xFF);
	//transmit(0x80);
	//for(j=0;j<4;j++)
		//{
			c = shiftByte();
 22a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <shiftByte>
//	 UCSR1A |= (1 << U2X1); //double baudrate                                        //When set, these two bits turn on the serial buffers to allow for serial communications
}

void transmit(unsigned char data)
{
while(!(UCSR0A & (1<<UDRE0)));
 22e:	5d 9b       	sbis	0x0b, 5	; 11
 230:	fe cf       	rjmp	.-4      	; 0x22e <main+0x1e>
UDR0=data;
 232:	8c b9       	out	0x0c, r24	; 12
 234:	fa cf       	rjmp	.-12     	; 0x22a <main+0x1a>

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
